<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="504ABF43040E886430D1FB99EAB57C1A" CODE_SIGNATURE="F8969F6036CC34C10CCA209CC82E4C7E" CONNECTOR="AAAD0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_VARI" TYPE="PROG" VERSION="1.0">
 <DIRECTORY DEVCLASS="ZAPLINK-CONNECTORS-MAIN" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA EDTX="X" VARCL="X" SUBC="S" RSTAT="K" RMAND="200" RLOAD="E" FIXPT="X" UCCHECK="X"/>
  <SOURCE>`
*&amp;---------------------------------------------------------------------*
*&amp; Subroutine Pool   ZAPLINK_VARI
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*

PROGRAM  zaplink_vari.

TYPES to_object TYPE REF TO zaplink_program.
TYPES to_cx TYPE REF TO zaplink_cx.
DATA o_prog TYPE to_object.
DATA o_cx   TYPE to_cx.
DATA s_text TYPE string.

DEFINE mac_raise.
  s_text = &amp;1.
  create object o_cx
    exporting
      textid = zaplink_cx=&gt;system_error
*        previous =
*        messages =
*        object =
*        subobject =
*        prev_cx =
*        ext_id =
*        _cx_list =
      cx_name = s_text.
  raise exception o_cx.
END-OF-DEFINITION.

*&amp;---------------------------------------------------------------------*
*&amp;      Form  set_object
*&amp;---------------------------------------------------------------------*
FORM set_object USING object TYPE to_object.
  IF o_prog IS BOUND.
    mac_raise text-sko.
  ENDIF.
  o_prog = object.
ENDFORM.                    &quot;set_object

*&amp;---------------------------------------------------------------------*
*&amp;      Form  clear_object
*&amp;---------------------------------------------------------------------*
FORM clear_object USING object TYPE to_object.
  IF o_prog &lt;&gt; object.
    mac_raise text-cko.
  ENDIF.
  CLEAR o_prog.
ENDFORM.                    &quot;clear_object
*&amp;---------------------------------------------------------------------*
*&amp;      Form  get_val
*&amp;---------------------------------------------------------------------*
FORM get_val_p USING p_param value(p_text) p_subrc.
  DATA l_value TYPE string.
  IF NOT o_prog IS BOUND.
    mac_raise text-nse.
  ENDIF.
  check not p_param is INITIAL.
  l_value = p_param.
  o_prog-&gt;get_param_value( l_value ).
ENDFORM.                    &quot;get_val

*&amp;---------------------------------------------------------------------*
*&amp;      Form  get_val_S
*&amp;---------------------------------------------------------------------*
FORM get_val_s TABLES p_selopt                              &quot;#EC *
                USING p_sign p_option p_low p_high
                      p_desc STRUCTURE rsselint p_subrc.

  IF NOT o_prog IS BOUND.
    mac_raise text-nse.
  ENDIF.
  o_prog-&gt;get_selectoption_value( p_selopt[] ).

ENDFORM.                    &quot;get_val_s

*&amp;---------------------------------------------------------------------*
*&amp;      Form  set_val_p
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_PARAM        text
*      --&gt;VALUE(P_TEXT)  text
*      --&gt;P_SUBRC        text
*----------------------------------------------------------------------*
FORM set_val_p USING p_param value(p_text) p_subrc.
  DATA l_value TYPE string.
  IF NOT o_prog IS BOUND.
    mac_raise text-nse.
  ENDIF.
  l_value = o_prog-&gt;set_param_value( ).
  check not l_value is INITIAL.
  p_param = l_value.
ENDFORM.                    &quot;set_val_p

*&amp;---------------------------------------------------------------------*
*&amp;      Form  set_val_s
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;P_SELOPT   text
*      --&gt;P_SIGN     text
*      --&gt;P_OPTION   text
*      --&gt;P_LOW      text
*      --&gt;P_HIGH     text
*      --&gt;P_DESC     text
*      --&gt;P_SUBRC    text
*----------------------------------------------------------------------*
FORM set_val_s TABLES p_selopt                              &quot;#EC *
                USING p_sign p_option p_low p_high
                      p_desc STRUCTURE rsselint p_subrc.
  DATA t_value  TYPE zaplink_program=&gt;tr_so_value.
  FIELD-SYMBOLS:
    &lt;v&gt; LIKE LINE OF t_value.

  IF NOT o_prog IS BOUND.
    mac_raise text-nse.
  ENDIF.
  t_value = o_prog-&gt;set_selectoption_value( ).
  LOOP AT t_value ASSIGNING &lt;v&gt;.
    CLEAR p_selopt.   MOVE-CORRESPONDING &lt;v&gt; TO p_selopt.   APPEND p_selopt.
  ENDLOOP.

ENDFORM.                    &quot;set_val_s</SOURCE>
  <TEXTSPOOL>
   <ITEM ID="I" KEY="CKO">
    <TEXTS>
     <ITEM LANGU="E" ENTRY="Object to clear are not the same" LENGTH="50 "/>
    </TEXTS>
   </ITEM>
   <ITEM ID="I" KEY="NSE">
    <TEXTS>
     <ITEM LANGU="E" ENTRY="Object is not set" LENGTH="50 "/>
    </TEXTS>
   </ITEM>
   <ITEM ID="I" KEY="SKO">
    <TEXTS>
     <ITEM LANGU="E" ENTRY="Object already defined" LENGTH="50 "/>
    </TEXTS>
   </ITEM>
   <ITEM ID="R">
    <TEXTS>
     <ITEM LANGU="E" ENTRY="Subroutine Pool for variant" LENGTH="27 "/>
    </TEXTS>
   </ITEM>
  </TEXTSPOOL>
 </RAW>
</ZL_OBJECT>
