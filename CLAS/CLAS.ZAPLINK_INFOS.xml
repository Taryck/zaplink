<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="D43601FA97F89437E9894A5A4350037E" CODE_SIGNATURE="FEE66221C6EF920D7CEDB328BCDC5489" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_INFOS" TYPE="CLAS" VERSION="1.01">
 <DIRECTORY DEVCLASS="ZAPLINK-FRAMEWORK-CORE" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X">
   <TEXTS>
    <ITEM LANGU="E" DESCRIPT="ZAPLink Informations"/>
   </TEXTS>
  </A0_MAINDATA>
  <ALIASES>
   <ITEM CMPNAME="TR_PACKAGES" VERSION="1" EXPOSURE="1" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_PACKAGES"/>
   <ITEM CMPNAME="TS_COMPKEY" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_COMPKEY"/>
   <ITEM CMPNAME="TT_COMPKEYS" VERSION="1" EXPOSURE="1" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_COMPKEYS"/>
  </ALIASES>
  <ATTRIBUTS>
   <ITEM CMPNAME="SAP" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTRDONLY="X" TYPTYPE="1" TYPE="TS_SAP"/>
   <ITEM CMPNAME="ZAPLINK" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTRDONLY="X" TYPTYPE="1" TYPE="TS_ZL"/>
  </ATTRIBUTS>
  <INTERFACES>
   <ITEM REFCLSNAME="ZAPLINK_DATATYPES" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1"/>
  </INTERFACES>
  <LOCAL>
   <TYPES>`
*&quot;* USE THIS SOURCE FILE FOR ANY TYPE DECLARATIONS (CLASS
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature
</TYPES>
   <IMPLEMENTATIONS>`
*&quot;* LOCAL CLASS IMPLEMENTATION FOR PUBLIC CLASS
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes
</IMPLEMENTATIONS>
   <MACROS>`
*&quot;* USE THIS SOURCE FILE FOR ANY MACRO DEFINITIONS YOU NEED
*&quot;* in the implementation part of the class
</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="CONSTRUCTOR" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="1 " MTDTYPE="2">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>`
  me-&gt;get_sap_data( ).
  me-&gt;get_zl_data( ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_SAP_DATA" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="2 ">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Get SAP Data"/>
    </TEXTS>
    <SOURCE>`
* FROM FUNC : STATUS_ANZEIGEN
* Machine type
  TYPES:
    BEGIN OF ts_ver_tab,
      line(80) TYPE c,
    END OF ts_ver_tab.
  DATA version_info TYPE STANDARD TABLE OF ts_ver_tab.
  FIELD-SYMBOLS:
    &lt;v&gt; LIKE LINE OF version_info.
  TYPES:
    BEGIN OF ts_ver_info,
      name TYPE string,
      value TYPE string,
    END OF ts_ver_info.
  DATA t_values_ver TYPE STANDARD TABLE OF ts_ver_info.
  DATA s_value LIKE LINE OF t_values_ver.
  DATA d_char(255) TYPE c.
  DATA it_comptab    TYPE STANDARD TABLE OF spam_cvers.
*  DATA it_components TYPE STANDARD TABLE OF comp_list_type.
  DATA s_comp        LIKE LINE OF sap-_components.
  FIELD-SYMBOLS:
    &lt;c&gt; LIKE LINE OF it_comptab.

  DEFINE mac_read_val.
    read table t_values_ver into s_value
         with key name = &amp;1.
    if sy-subrc = 0.    &amp;2 = s_value-value.   endif.
  END-OF-DEFINITION.


*CALL &apos;SAPCORE&apos; ID &apos;ID&apos; FIELD &apos;VERSION&apos;
*               ID &apos;TABLE&apos; FIELD version_info-*sys*.
  CALL &apos;SAPCORE&apos; ID &apos;ID&apos; FIELD &apos;VERSION&apos;
                 ID &apos;TABLE&apos; FIELD version_info.
  LOOP AT version_info ASSIGNING &lt;v&gt;.
    CLEAR s_value.
    s_value-name = &lt;v&gt;(21).   s_value-value = &lt;v&gt;+21.
    APPEND s_value TO t_values_ver.
  ENDLOOP.
  mac_read_val:
    &apos;SAP version&apos; sap-status-sap_ver,
    &apos;operating system&apos; sap-status-os,
    &apos;machine type&apos; sap-status-machine_type,
    &apos;database system&apos; sap-status-db_sys,
    &apos;kernel release&apos; sap-status-kernel,
    &apos;database library&apos; sap-status-db_lib,
    &apos;ABAP load version&apos; sap-status-abap_ver,
    &apos;CUA load version&apos; sap-status-cua_ver.

* Database name
*  CALL FUNCTION &apos;DB_DBNAME&apos;
*    IMPORTING
*      dbname = status-database_name.
** Database server
*  CALL FUNCTION &apos;DB_DBHOST&apos;
*    IMPORTING
*      dbhost = status-database_host.
** Database schema/owner
*  CALL FUNCTION &apos;DB_DBSCHEMA&apos;
*    IMPORTING
*      dbschema = status-database_owner.
* Database release
  CALL FUNCTION &apos;DB_GET_RELEASE&apos;
    IMPORTING
      release = d_char.
  sap-status-db_release = d_char.

* Unicode information
  IF cl_abap_char_utilities=&gt;charsize = 1.
    sap-status-unicode = &apos;Yes&apos;(oui).
  ELSE.
    sap-status-unicode = &apos;No&apos;(non).
  ENDIF.

*  CALL FUNCTION &apos;UPG_GET_COMPONENT_RELEASES&apos;
**   EXPORTING
**     IV_COMPONENT                      = &apos;*&apos;
**     IV_BUFFERED                       = &apos;X&apos;
**   IMPORTING
**     EV_COMPCNT                        =
**     EV_BASISSTATE                     =
*    TABLES
*      tt_cvers                          = components_releases
*    EXCEPTIONS
*      no_release_found                  = 0
*      component_release_not_found       = 0
*      OTHERS                            = 0.
*  IF sy-subrc &lt;&gt; 0.
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*  ENDIF.

  CALL FUNCTION &apos;SPAM_READ_PAT03&apos;
*   EXPORTING
*     IV_PATCH_NAME                    = &apos;*&apos;
*     IV_PATCH_TYPE                    = &apos;*&apos;
*     IV_BASE_RELEASE                  = &apos;CURR&apos;
*     IV_COMPONENT_ID                  = &apos;CURR&apos;
*     IV_COMPONENT_RELEASE             = &apos;CURR&apos;
*     IV_ADDON_ID                      = &apos;CURR&apos;
*     IV_ADDON_RELEASE                 = &apos;CURR&apos;
*     IV_ACTIV                         = &apos;X&apos;
*     IV_ONLY_SUPP_PACKS               = &apos;X&apos;
*     IV_RSTLAN_IO_MODE                = &apos; &apos;
*   IMPORTING
*     EV_PAT03_ENTRIES                 =
    TABLES
      tt_pat03_selected                = sap-_hot_packages
    EXCEPTIONS
      wrong_release_string             = 0
      wrong_patch_type                 = 0
      no_component_available           = 0
      wrong_component_id_release       = 0
      wrong_addon_id_release           = 0
      OTHERS                           = 0.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  SORT sap-_hot_packages BY component  ASCENDING
                            addon_id   ASCENDING
                            imple_date ASCENDING
                            imple_time ASCENDING.

* FROM (LSHSYO01) MODULE init OUTPUT.
  CALL FUNCTION &apos;OCS_GET_INSTALLED_COMPS&apos;
    TABLES
      tt_comptab = it_comptab
    EXCEPTIONS
      OTHERS     = 0.
  CALL FUNCTION &apos;OCS_SORT_COMPS_HIERARCHICAL&apos;
    TABLES
      tt_comptab = it_comptab
    EXCEPTIONS
      OTHERS     = 0.

  LOOP AT it_comptab ASSIGNING &lt;c&gt;.
    CLEAR s_comp.   s_comp-hdr = &lt;c&gt;.
    CALL FUNCTION &apos;OCS_GET_COMPONENT_STATE&apos;
      EXPORTING
        iv_component  = &lt;c&gt;-component
      IMPORTING
        ev_comp_rel             = s_comp-release
        ev_comp_type            = s_comp-comp_type
        ev_comp_level           = s_comp-level
        ev_comp_spp_level       = s_comp-spp_level
        ev_last_patch           = s_comp-high_package
        ev_last_spp             = s_comp-high_spp
        ev_comp_active          = s_comp-active
        ev_comp_patchable       = s_comp-patchable
        ev_is_subcomp           = s_comp-state
*       ES_MASTERCOMP           =
      EXCEPTIONS
        unknown_component       = 0
        OTHERS                  = 0.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
    APPEND s_comp TO sap-_components.
  ENDLOOP.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_ZL_DATA" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="3 ">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Get ZAPLink Data"/>
    </TEXTS>
    <SOURCE>`
  DATA t_comps TYPE tt_compkeys.
  DATA r_packages TYPE tr_packages.
  DATA s_package  LIKE LINE OF r_packages.
  DATA s_comp LIKE LINE OF zaplink-components.
  DATA o_list TYPE to_list.
  DATA o_cnx  TYPE to_connector.
  DATA o_comp TYPE to_component.
  DATA i_sign TYPE ti_code_signature.
  FIELD-SYMBOLS:
    &lt;c&gt; LIKE LINE OF t_comps.

* Connectors
  o_list = zaplink_connectors=&gt;get_connectorlist( ).

  s_package-sign = &apos;I&apos;. s_package-option = &apos;EQ&apos;.    s_package-low = &apos;ZAPLINK&apos;.
  APPEND s_package TO r_packages.
  t_comps = zaplink_tools=&gt;get_keys_from_package( packages = r_packages ).
  SORT t_comps BY type name.
  LOOP AT t_comps ASSIGNING &lt;c&gt;.
    CLEAR s_comp.   s_comp-hdr = &lt;c&gt;.

    o_comp = zaplink_component=&gt;create_new( &lt;c&gt; ).
    CHECK o_comp IS BOUND.    o_cnx = o_comp-&gt;connector( ).
    CHECK o_cnx IS BOUND.
    CHECK o_cnx-&gt;do_exists( o_comp ) = abap_true.

    SELECT SINGLE devclass INTO s_comp-devclass
      FROM tadir
      WHERE    pgmid = &apos;R3TR&apos;
        AND   object = &lt;c&gt;-type
        AND obj_name = &lt;c&gt;-name.

    TRY.
        i_sign ?= o_cnx.
      CATCH cx_root.
    ENDTRY.
    IF i_sign IS BOUND.   s_comp-version = i_sign-&gt;get_signature( o_comp ).     ENDIF.

    APPEND s_comp TO zaplink-components.
  ENDLOOP.</SOURCE>
   </ITEM>
  </METHODS>
  <TYPES>
   <ITEM CMPNAME="TI_CODE_SIGNATURE" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="4 " TYPTYPE="3" TYPE="ZAPLINK_CNX_EXT_CODE_SIGNATURE">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPLink Connector Extension : Source Code Signature"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_COMPONENT" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="3 " TYPTYPE="3" TYPE="ZAPLINK_COMPONENT">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Zap Link Component"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_CONNECTOR" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="2 " TYPTYPE="3" TYPE="ZAPLINK_CONNECTOR">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPLink Connector interface"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_LIST" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZAPLINK_LIST">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPLink Components list"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_COMP_DETAIL" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="4" SRCROW1="25 " SRCCOLUMN1="4 " SRCROW2="35 " SRCCOLUMN2="27 " TYPESRC_LENG="423 ">
    BEGIN OF ts_comp_detail.
    INCLUDE TYPE spam_cvers AS hdr.
    TYPES:
         level        TYPE spam_fpdef-version,
         high_package TYPE pat03-patch,
         high_spp     TYPE pat03-patch,
         spp_level    TYPE spam_fpdef-version,
         state        TYPE comp_state,
         active       TYPE spam_cvers-comp_type,
         patchable    TYPE spam_cvers-comp_type,
       END OF ts_comp_detail

    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Components detailed informations"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_SAP" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="7 " TYPTYPE="4" SRCROW1="54 " SRCCOLUMN1="4 " SRCROW2="58 " SRCCOLUMN2="19 " TYPESRC_LENG="154 ">BEGIN OF ts_sap,
        status TYPE ts_status_info,
        _hot_packages TYPE tt_hot_pack,
        _components TYPE tt_comps,
      END OF  ts_sap
</ITEM>
   <ITEM CMPNAME="TS_STATUS_INFO" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="6 " TYPTYPE="4" SRCROW1="41 " SRCCOLUMN1="4 " SRCROW2="52 " SRCCOLUMN2="34 " TYPESRC_LENG="573 ">
    BEGIN OF ts_status_info,
                sap_ver              TYPE string,
                os                   TYPE string,
                machine_type         TYPE string,
                unicode              TYPE string,
                db_sys               TYPE string,
                db_release           TYPE string,
                db_lib               TYPE string,
                kernel               TYPE string,
                abap_ver             TYPE string,
                cua_ver              TYPE string,
              END OF ts_status_info

    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="General Status Informations"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_ZL" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="8 " TYPTYPE="4" SRCROW1="60 " SRCCOLUMN1="4 " SRCROW2="62 " SRCCOLUMN2="18 " TYPESRC_LENG="76 ">BEGIN OF ts_zl,
        components TYPE tt_zl_comps,
      END OF  ts_zl
</ITEM>
   <ITEM CMPNAME="TS_ZL_COMP" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="16 " SRCCOLUMN1="4 " SRCROW2="21 " SRCCOLUMN2="23 " TYPESRC_LENG="169 ">BEGIN OF ts_zl_comp.
    INCLUDE TYPE ts_compkey AS hdr.
    TYPES:
         version      TYPE string,
         devclass     type string,
       END OF ts_zl_comp
</ITEM>
   <ITEM CMPNAME="TT_COMPS" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="5 " TYPTYPE="4" SRCROW1="39 " SRCCOLUMN1="4 " SRCROW2="39 " SRCCOLUMN2="66 " TYPESRC_LENG="65 ">
    tt_comps TYPE STANDARD TABLE OF ts_comp_detail WITH DEFAULT KEY

    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Components informations"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TT_HOT_PACK" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="37 " SRCCOLUMN1="4 " SRCROW2="37 " SRCCOLUMN2="60 " TYPESRC_LENG="59 ">
    tt_hot_pack TYPE STANDARD TABLE OF pat03 WITH DEFAULT KEY

    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Hot Packages informations"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TT_ZL_COMPS" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="23 " SRCCOLUMN1="4 " SRCROW2="23 " SRCCOLUMN2="72 " TYPESRC_LENG="71 ">tt_zl_comps type SORTED TABLE OF ts_zl_comp with UNIQUE key type name
</ITEM>
  </TYPES>
 </RAW>
</ZL_OBJECT>
