<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="43F892EF1B1E1BA1BC0087E88A98826F" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_FUNCTION_GROUP" TYPE="CLAS" VERSION="1.01">
 <DIRECTORY DEVCLASS="ZAPLINK-CONNECTORS-MAIN" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" UUID="BEA08F4B0E2C2006E1000000AC120173" EXPOSURE="2" STATE="1" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X">
   <INHERITANCE REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" STATE="1"/>
   <TEXTS>
    <ITEM LANGU="E" DESCRIPT="Data for Class"/>
   </TEXTS>
  </A0_MAINDATA>
  <ATTRIBUTS>
   <ITEM CMPNAME="BALLOG_SUBOBJECT" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="&apos;CNX_FUNCTION_GROUP&apos;" TYPTYPE="1" TYPE="BALSUBOBJ">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Application Log: Subobject"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="C_MAINPROG_PREFIX" VERSION="1" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="&apos;SAPL&apos;" TYPTYPE="1" TYPE="TRDIR-NAME">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Function group Main program prefix"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="R_DOC_ID" VERSION="1" STATE="1" EDITORDER="2 " ATTDECLTYP="1" TYPTYPE="1" TYPE="TR_DOCID">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Documentation Object"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="ST_FUNCTION_GROUP" VERSION="1" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;FUGR&apos;" TYPTYPE="1" TYPE="TD_COMPTYPE">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Transport category : ABAP Object"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_UUID" VERSION="1" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;F1838F4B202C2806E1000000AC120173&apos;" TYPTYPE="1" TYPE="TD_CONNUUID">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="UUID for connector Program"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="_VER" VERSION="1" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;1.0&apos;" TYPTYPE="1" TYPE="TD_CONNVER">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Connector Version"/>
    </TEXTS>
   </ITEM>
  </ATTRIBUTS>
  <LOCAL>
   <TYPES>
*&quot;* USE THIS SOURCE FILE FOR ANY TYPE DECLARATIONS (CLASS
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* IMPLEMENTATION OR PRIVATE METHOD&apos;S SIGNATURE</TYPES>
   <IMPLEMENTATIONS>
*&quot;* LOCAL CLASS IMPLEMENTATION FOR PUBLIC CLASS
*&quot;* use this source file for the implementation part of
*&quot;* LOCAL HELPER CLASSES</IMPLEMENTATIONS>
   <MACROS>
*&quot;* USE THIS SOURCE FILE FOR ANY MACRO DEFINITIONS YOU NEED
*&quot;* in the implementation part of the class

INCLUDE ZAPLINK_MACROS.</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="CLASS_CONSTRUCTOR" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="2 " MTDTYPE="2" MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="CLASS_CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>
*table TDCLT
*DOKCLASS DOKTITEL
*CF       Program function                                             Program              Function
*CM       Pull-down menu/menu bar                                      Program              Menu
*RE       Report/Function Group, Logical DB                            Program/module pool
  DATA _id LIKE LINE OF r_doc_id.

  _id-sign = &apos;I&apos;.
  _id-option = &apos;EQ&apos;.
  _id-low = &apos;CF&apos;. APPEND _id TO r_doc_id.
  _id-low = &apos;CM&apos;. APPEND _id TO r_doc_id.
  _id-low = &apos;RE&apos;. APPEND _id TO r_doc_id.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CONSTRUCTOR" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="1 " MTDTYPE="2">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>
  DATA type LIKE LINE OF supported_types.

  CALL METHOD super-&gt;constructor.
  mac_create_log application_log ballog_subobject space.
  type-type = st_function_group. INSERT type INTO TABLE supported_types.

  uuid = _uuid.
  version = _ver.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_ALL_INCLUDES" VERSION="1" STATE="1" EDITORDER="1 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="In subtitution to MF &apos;RS_GET_ALL_INCLUDES&apos;"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="NAME" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="RS38L-AREA">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Function group, to which the function module belongs"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULTS" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TT_INCLUDES"/>
    </PARAMETERS>
    <SOURCE>
  DATA: _result           LIKE LINE OF results.
* Code from FM &apos;RS_GET_ALL_INCLUDES&apos;
  DATA: program           TYPE trdir-name.
  data: _fugr_name        type RS38L-AREA.
  data: _is_reserved_name type c.
  DATA: includes          type STANDARD TABLE OF rseuinc.
  FIELD-SYMBOLS:
    &lt;wa&gt; like LINE OF includes.

  program = get_mainprogram( name ).
* Code from FM &apos;RS_GET_ALL_INCLUDES&apos;
  SELECT * FROM d010inc
           APPENDING CORRESPONDING FIELDS OF TABLE includes
*           appending table includes
           WHERE master = program.
  CALL FUNCTION &apos;RS_WORKING_AREA_ACTIVE_CHECK&apos;
    EXCEPTIONS
      nok = 1.
  IF sy-subrc = 0.
    SELECT * FROM rseuinc
             APPENDING CORRESPONDING FIELDS OF TABLE includes
*             appending table includes
             WHERE master = program.
  ENDIF.
  SORT includes by include.
  DELETE ADJACENT DUPLICATES FROM includes COMPARING include.
  LOOP AT includes ASSIGNING &lt;wa&gt;.
    CALL FUNCTION &apos;RS_PROGNAME_SPLIT&apos;
      EXPORTING
        progname_with_namespace     = &lt;wa&gt;-include
      IMPORTING
*        progname_without_namespace  = l_progname_without_namespace
        fugr_is_reserved_name       = _is_reserved_name
        FUGR_GROUP                  = _fugr_name
*        fugr_is_functionmodule_name = _is_fm
*        fugr_suffix                 = l_fugr_suffix
*        sldb_is_reserved_name       = l_sldb_is_reserved_name
*        type_is_reserved_name       = l_type_is_reserved_name
      EXCEPTIONS
        OTHERS                      = 1.
    IF sy-subrc = 0 AND _fugr_name = name.
      _result-name = &lt;wa&gt;-include.
      APPEND _result TO results.
    ENDIF.
  ENDLOOP.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_MAINPROGRAM" VERSION="1" STATE="1" EDITORDER="2 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Get main program from Area"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="NAME" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="RS38L-AREA">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Function group, to which the function module belongs"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TRDIR-NAME">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ABAP Program Name"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>
  DATA s_rs38l TYPE rs38l.
* From LSFUNCTION_BUILDERI01 : module okcode_105 input.
  CALL FUNCTION &apos;FUNCTION_INCLUDE_SPLIT&apos;
    EXPORTING
      complete_area = name
    IMPORTING
      namespace     = s_rs38l-namespace
      group         = s_rs38l-str_area
    EXCEPTIONS
      OTHERS        = 6.
  CONCATENATE s_rs38l-namespace c_mainprog_prefix s_rs38l-str_area INTO result.
</SOURCE>
   </ITEM>
  </METHODS>
  <REDEFINITIONS>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CNX_EXT_CLEANER~ANONYMIZE">
    <SOURCE>
*  DATA o_prog TYPE to_program.
*
*  TRY.
*      super-&gt;zaplink_cnx_ext_cleaner~anonymize( object ).
*    CATCH zaplink_cx_connector INTO o_mycx.
*      RAISE EXCEPTION o_mycx.
*  ENDTRY.
*
*  o_prog ?= object-&gt;raw.
*  clear:
*    o_prog-&gt;A0_MAINDATA-CNAM,
*    o_prog-&gt;A0_MAINDATA-CDAT,
*    o_prog-&gt;A0_MAINDATA-UNAM,
*    o_prog-&gt;A0_MAINDATA-UDAT,
*    o_prog-&gt;A0_MAINDATA-SDATE,
*    o_prog-&gt;A0_MAINDATA-STIME,
*    o_prog-&gt;A0_MAINDATA-IDATE,
*    o_prog-&gt;A0_MAINDATA-ITIME.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CNX_EXT_CLEANER~UNANONYMIZE">
    <SOURCE>
*  DATA o_prog TYPE to_program.
*
*  TRY.
*      super-&gt;zaplink_cnx_ext_cleaner~unanonymize( object ).
*    CATCH zaplink_cx_connector INTO o_mycx.
*      RAISE EXCEPTION o_mycx.
*  ENDTRY.
*
*  o_prog ?= object-&gt;raw.
*  o_prog-&gt;A0_MAINDATA-CNAM = sy-uname.
**    o_prog-&gt;A0_MAINDATA-CDAT,
**    o_prog-&gt;A0_MAINDATA-UNAM,
**    o_prog-&gt;A0_MAINDATA-UDAT,
**    o_prog-&gt;A0_MAINDATA-SDATE,
**    o_prog-&gt;A0_MAINDATA-STIME,
**    o_prog-&gt;A0_MAINDATA-IDATE,
**    o_prog-&gt;A0_MAINDATA-ITIME.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~CREATE_NEW_RAW">
    <SOURCE>
  DATA o_group TYPE to_group.

  CREATE OBJECT object.
  CASE type.
    WHEN st_function_group.
      CREATE OBJECT o_group.
      object-&gt;raw = o_group.
    WHEN OTHERS.
      CLEAR object.
* Type &apos;&amp;TYPE&amp;&apos; is not supported by this connector &apos;&amp;CONNCLASS&amp;&apos;
      RAISE EXCEPTION TYPE zaplink_cx_connector
        EXPORTING
          textid = zaplink_cx_connector=&gt;type_not_supported
          type   = type
          connclass = &apos;ZAPLINK_PROGRAM&apos;.
  ENDCASE.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~DELETE_FROM_SAP">
    <SOURCE>
  DATA pool  TYPE rs38l-area.
  DATA type  TYPE td_comptype.

  TRY.
      type = component-&gt;get_type( ).
      CASE type.
        WHEN st_function_group.
          pool = component-&gt;get_name( ).
          CALL FUNCTION &apos;FUNCTION_POOL_DELETE&apos;
            EXPORTING
              pool              = pool
              skip_progress_ind = &apos;X&apos;
            EXCEPTIONS
              functions_exists  = 1
              not_found         = 0
              OTHERS            = 3.
          IF sy-subrc &lt;&gt; 0.
            o_mycx ?= zaplink_cx=&gt;create_from_mf_cx( funcname = &apos;FUNCTION_POOL_DELETE&apos;
                                                        subrc = sy-subrc
                                                    classname = &apos;ZAPLINK_CX_CONNECTOR&apos;
                                                    textid = zaplink_cx=&gt;system_error ).
            RAISE EXCEPTION o_mycx.
          ENDIF.
        WHEN OTHERS.
* Type &apos;&amp;TYPE&amp;&apos; is not supported by this connector &apos;&amp;CONNCLASS&amp;&apos;
          RAISE EXCEPTION TYPE zaplink_cx_connector
            EXPORTING
              textid = zaplink_cx_connector=&gt;type_not_supported
              type   = type
              connclass = &apos;ZAPLINK_PROGRAM&apos;.
      ENDCASE.

    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.

  result = abap_true.
</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~DO_EXISTS">
    <SOURCE>
  DATA _name TYPE tlibg-area.
  DATA type  TYPE td_comptype.

  exists = me-&gt;exists-not_exists.

  TRY.
      type = component-&gt;get_type( ).
      CASE type.
        WHEN st_function_group.
          _name = component-&gt;get_name( ).
          CALL FUNCTION &apos;RS_FUNCTION_POOL_EXISTS&apos;
            EXPORTING
              function_pool   = _name
            EXCEPTIONS
              pool_not_exists = 1
              OTHERS          = 2.
          IF sy-subrc = 0.    exists = me-&gt;exists-exists.   ENDIF.
        WHEN OTHERS.
* Type &apos;&amp;TYPE&amp;&apos; is not supported by this connector &apos;&amp;CONNCLASS&amp;&apos;
          RAISE EXCEPTION TYPE zaplink_cx_connector
            EXPORTING
              textid = zaplink_cx_connector=&gt;type_not_supported
              type   = type
              connclass = &apos;ZAPLINK_MESSAGE&apos;.
      ENDCASE.

    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.
</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~IS_SUPPORTED_VERSION">
    <SOURCE>
  result = abap_false.
  if version = _ver.
    result = abap_true.
  endif.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~READ_FROM_SAP">
    <SOURCE>
  DATA o_data     TYPE to_group.
  DATA s_fm_data  TYPE zaplink_fugr_data=&gt;ts_fm_data.
  DATA d_name TYPE td_compname.
*  DATA _obj   TYPE doku_obj.
  DATA type   TYPE td_comptype.
*  data d_area TYPE RS38L-AREA.
  DATA d_mainprog TYPE td_progname.
  DATA t_functions TYPE STANDARD TABLE OF rs38l_incl WITH DEFAULT KEY.
  DATA s_func LIKE LINE OF s_fm_data-functions.
  DATA t_doc TYPE STANDARD TABLE OF rsfdo WITH DEFAULT KEY.
  DATA t_src TYPE STANDARD TABLE OF rssource WITH DEFAULT KEY.
  FIELD-SYMBOLS:
    &lt;f&gt; LIKE LINE OF t_functions.

  TRY.
      type = component-&gt;get_type( ).
      CREATE OBJECT object.
      object-&gt;set_component( component ).
      CASE type.
        WHEN st_function_group.
          s_fm_data-header-area = d_name = object-&gt;name.
          CALL FUNCTION &apos;RS_FUNCTION_POOL_CONTENTS&apos;
            EXPORTING
              function_pool           = s_fm_data-header-area
            TABLES
              functab                 = t_functions
            EXCEPTIONS
              function_pool_not_found = 1
              OTHERS                  = 2.
          IF sy-subrc &lt;&gt; 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
          ENDIF.

          SELECT * INTO TABLE s_fm_data-texts FROM tlibt WHERE area = s_fm_data-header-area.
          SELECT * INTO TABLE s_fm_data-function_texts FROM tftit FOR ALL ENTRIES IN t_functions WHERE funcname = t_functions-funcname.
          SELECT * INTO TABLE s_fm_data-param_texts FROM funct FOR ALL ENTRIES IN t_functions WHERE funcname = t_functions-funcname.
          LOOP AT t_functions ASSIGNING &lt;f&gt;.
            CLEAR s_func.   s_func-header-name = &lt;f&gt;-funcname.   s_func-source = get_prog_source( &lt;f&gt;-include ).
            CALL FUNCTION &apos;RPY_FUNCTIONMODULE_READ&apos;
              EXPORTING
                functionname             = s_func-header-name
              IMPORTING
                global_flag              = s_func-header-global
                remote_call              = s_func-header-remote
                update_task              = s_func-header-utask
*               SHORT_TEXT               =
*               FUNCTION_POOL            =
              TABLES
                import_parameter         = s_func-import_p
                changing_parameter       = s_func-changing_p
                export_parameter         = s_func-export_p
                tables_parameter         = s_func-tables
                exception_list           = s_func-exceptions
                documentation            = t_doc
                SOURCE                   = t_src
              EXCEPTIONS
                error_message            = 1
                function_not_found       = 2
                invalid_name             = 3
                OTHERS                   = 4.
            IF sy-subrc &lt;&gt; 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
            ENDIF.
            INSERT s_func INTO TABLE s_fm_data-functions.
          ENDLOOP.

          s_fm_data-includes = get_all_includes( s_fm_data-header-area ).

          d_mainprog = get_mainprogram( s_fm_data-header-area ).
* Texts Pool
          s_fm_data-textspool = get_prog_textpool( d_mainprog ).

* Dynpro
          s_fm_data-dynpros = get_dynpros( d_mainprog ).

* Menu Painter
          s_fm_data-menupainter = get_menus( d_mainprog ).
** Documentation
**      CONCATENATE _name &apos;*&apos; INTO _obj. &quot; Issue:7
*          s_obj-prog = _name.
*          s_obj-wildcard = &apos;*&apos;.
*          _obj = s_obj.
**Issue:7
*          o_data-&gt;documentation = zaplink_documentation=&gt;get( ids = r_doc_id
*                                                          object = _obj ).
          CREATE OBJECT o_data.
          o_data-&gt;from_data( s_fm_data ).
          CLEAR o_data-&gt;a0_maindata-AREA.
          object-&gt;raw = o_data.
        WHEN OTHERS.
* Type &apos;&amp;TYPE&amp;&apos; is not supported by this connector &apos;&amp;CONNCLASS&amp;&apos;
          RAISE EXCEPTION TYPE zaplink_cx_connector
            EXPORTING
              textid = zaplink_cx_connector=&gt;type_not_supported
              type   = type
              connclass = &apos;ZAPLINK_PROGRAM&apos;.
      ENDCASE.

    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~WRITE_TO_SAP">
    <SOURCE>
  DATA o_data  TYPE REF TO zaplink_prog_data.
  DATA _prog  TYPE programm.
  DATA _oname TYPE e071-obj_name.
  DATA _rep   TYPE progdir.
  DATA _comp  TYPE to_component.
  DATA _name  TYPE td_compname.

  TRY.

      CASE object-&gt;type.
        WHEN st_function_group.
          o_data ?= object-&gt;raw.
          _prog = o_data-&gt;a0_maindata-name = object-&gt;name.
** Program
** Add program to tadir with $TMP
** This prevent include to be inconsistent
*      CALL FUNCTION &apos;RS_CORR_INSERT&apos;
*        EXPORTING
*          object                         = _prog
*          object_class                   = &apos;ABAP&apos;
*          mode                           = &apos;I&apos;    &quot; Insert
**         GLOBAL_LOCK                    = &apos; &apos;
*          devclass                       = &apos;$TMP&apos;
**         KORRNUM                        = &apos; &apos;
**         USE_KORRNUM_IMMEDIATEDLY       = &apos; &apos;
**         AUTHOR                         = &apos; &apos;
**         MASTER_LANGUAGE                = &apos; &apos;
**         GENFLAG                        = &apos; &apos;
**         PROGRAM                        = &apos; &apos;
**         OBJECT_CLASS_SUPPORTS_MA       = &apos; &apos;
**         EXTEND                         = &apos; &apos;
**         SUPPRESS_DIALOG                = &apos; &apos;
**         MOD_LANGU                      = &apos; &apos;
**         ACTIVATION_CALL                = &apos; &apos;
**       IMPORTING
**         DEVCLASS                       =
**         KORRNUM                        =
**         ORDERNUM                       =
**         NEW_CORR_ENTRY                 =
**         AUTHOR                         =
**         TRANSPORT_KEY                  =
**         NEW_EXTEND                     =
*        EXCEPTIONS
*          cancelled                      = 1
*          permission_failure             = 2
*          unknown_objectclass            = 3
*          OTHERS                         = 4.
*      IF sy-subrc &lt;&gt; 0.
*        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*      ENDIF.

          _oname = _prog.
          CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
            EXPORTING
              object                  = &apos;REPS&apos;
              obj_name                = _oname
*         DELETED_FLAG            = &apos; &apos;
*       IMPORTING
*         OBJECT_INSERTED         =
            EXCEPTIONS
              wrong_object_name       = 1
              OTHERS                  = 2.
          IF sy-subrc &lt;&gt; 0.
            MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
          ENDIF.

          CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
            EXPORTING
              object                  = &apos;REPT&apos;
              obj_name                = _oname
*         DELETED_FLAG            = &apos; &apos;
*       IMPORTING
*         OBJECT_INSERTED         =
            EXCEPTIONS
              wrong_object_name       = 1
              OTHERS                  = 2.
          IF sy-subrc &lt;&gt; 0.
            MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
          ENDIF.

          MOVE-CORRESPONDING o_data-&gt;a0_maindata TO _rep.
          _rep-state = &apos;I&apos;.
*      MODIFY reposrc FROM _rep. &quot;The databae view &quot;REPOSRC&quot; is write-protected, so it cannot be changed.
          MODIFY progdir FROM _rep.
          _rep-state = &apos;A&apos;.
*      MODIFY reposrc FROM _rep. &quot;The databae view &quot;REPOSRC&quot; is write-protected, so it cannot be changed.
          MODIFY progdir FROM _rep.
* Source code
          set_prog_source( program = _prog
                            source = o_data-&gt;source-_ ).
* Text Pool
          set_prog_textpool( program = _prog
                            textpool = o_data-&gt;textspool ).
* Dynpro : Issue 8
          set_dynpros( program = _prog
                       dynpros = o_data-&gt;dynpros ).

* Menu Painter : Issue 9
*          set_menus( program = _prog
*                       menus = o_data-&gt;menupainter ).

* Documentation
          zaplink_documentation=&gt;set( t_docs = o_data-&gt;documentation ).

*      COMMIT WORK AND WAIT. &quot; why ?

          CREATE OBJECT _comp.
          _comp-&gt;set_type( st_function_group ).
          _name = _prog.
          _comp-&gt;set_name( _name ).
          CREATE OBJECT components.
          components-&gt;add( _comp ).
        WHEN OTHERS.
* Type &apos;&amp;TYPE&amp;&apos; is not supported by this connector &apos;&amp;CONNCLASS&amp;&apos;
          RAISE EXCEPTION TYPE zaplink_cx_connector
            EXPORTING
              textid = zaplink_cx_connector=&gt;type_not_supported
              type   = object-&gt;type
              connclass = &apos;ZAPLINK_PROGRAM&apos;.
      ENDCASE.

    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.
</SOURCE>
   </ITEM>
  </REDEFINITIONS>
  <TYPEGROUPS>
   <ITEM TYPEGROUP="ABAP" VERSION="1" IMPLICIT="X"/>
  </TYPEGROUPS>
  <TYPES>
   <ITEM CMPNAME="TO_GROUP" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZAPLINK_FUGR_DATA">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Data for Function group"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_PROG_ATTR" VERSION="1" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="6 " SRCCOLUMN1="4 " SRCROW2="9 " SRCCOLUMN2="22 " TYPESRC_LENG="102 ">
    BEGIN OF ts_prog_attr.
  INCLUDE TYPE ts_base_attributs AS base.
  TYPES:
    END OF ts_prog_attr

    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Program Attributs"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_SOURCE" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="5 " TYPTYPE="1" TYPE="STRING">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ABAP Source code"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_TEXT" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="13 " SRCCOLUMN1="4 " SRCROW2="17 " SRCCOLUMN2="17 " TYPESRC_LENG="128 ">begin of ts_text,
      langu   type SPRAS,
      ENTRY	  type TEXTPOOLTX,
      LENGTH  type TEXTPOOLLN,
    end of ts_text</ITEM>
   <ITEM CMPNAME="TS_TEXTPOOL" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="4" SRCROW1="21 " SRCCOLUMN1="4 " SRCROW2="25 " SRCCOLUMN2="21 " TYPESRC_LENG="136 ">begin of ts_textpool,
      ID    type  TEXTPOOLID,
      KEY	  type  TEXTPOOLKY,
      texts type  tt_texts,
    end of ts_textpool</ITEM>
   <ITEM CMPNAME="TT_INCLUDES" VERSION="1" STATE="1" EDITORDER="2 " TYPTYPE="1" TYPE="ZAPLINK_FUGR_DATA=&gt;TT_INCLUDES"/>
   <ITEM CMPNAME="TT_TEXTPOOLS" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="27 " SRCCOLUMN1="4 " SRCROW2="27 " SRCCOLUMN2="71 " TYPESRC_LENG="68 ">
    TT_TEXTPOOLs type SORTED TABLE OF ts_textpool WITH UNIQUE key ID KEY
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Table of textppool"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TT_TEXTS" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="19 " SRCCOLUMN1="4 " SRCROW2="19 " SRCCOLUMN2="62 " TYPESRC_LENG="59 ">tt_texts type SORTED TABLE OF ts_text WITH UNIQUE KEY langu</ITEM>
   <ITEM CMPNAME="T_RAW" VERSION="1" EXPOSURE="2" STATE="1" TYPTYPE="1" TYPE="RSWSOURCET">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ABAP Source"/>
    </TEXTS>
   </ITEM>
  </TYPES>
 </RAW>
</ZL_OBJECT>
